/* AS3	Copyright 2009 __velcrew__.		www.velcrew.com*/package com.velcrew.video {		/**	 *	Class description.	 *		 *	videpPlayer V.0.5	 *	 *		 *		 *	@langversion ActionScript 3.0	 *	@playerversion Flash 9.0	 *	 *	@author Luis Teixeira	 *	@since  29.05.2009	 */		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.NetStatusEvent;	import flash.media.SoundTransform;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;			public class VideoPlayer extends MovieClip 	{				/* @ Variables				____________________________________________*/				private var _videoWidth				:uint;		private var _videoHeight			:uint;		private var _videoURL				:String;		private var _nvideo					:Video;		private var _videoStarted			:Boolean;		private var _videoBuffer			:uint;		private var _nets					:NetStream;		private var _netc					:NetConnection;		private var _soundVolume			:Number;		private var _pastVolume				:Number;		private var _sndTransf				:SoundTransform;		private var _videoPlaying			:Boolean;		private var _actTime				:uint;		private var	_uintDurtion			:uint; 		private var _loadingFinish 			:Boolean;						/* @ Control Clips			____________________________________________*/		private var _seekProgress			:MovieClip;		private var _seekLoader				:MovieClip;		private var _seekWidth				:Number;		private var _netsMetaData			:Object;					private var playpauseBtMc			:MovieClip;		private var bufferClipMc			:MovieClip;		private var volumeMC				:MovieClip;		private var muteButtomMc			:MovieClip;		private var durTimeMc				:TextField;		private var centralBtMc				:MovieClip;						public function VideoPlayer(videoURL:String,videoWidth:uint, videoHeight:uint, videoStarted:Boolean = true, videoBuffer:uint = 10):void		{			_loadingFinish 		= false;						_videoURL			= videoURL;			_videoWidth 		= videoWidth;			_videoHeight 		= videoHeight;			_videoBuffer		= videoBuffer;			_videoStarted		= videoStarted;						_netsMetaData		= new Object();			_soundVolume		= 1;						_nvideo 			= new Video(_videoWidth, _videoHeight);						_netc = new NetConnection();			_netc.connect(null);						_nets = new NetStream(_netc);			_nets.client = _netsMetaData;			_netsMetaData.onMetaData = metaObject;			_nets.addEventListener(NetStatusEvent.NET_STATUS, onVideoEvent);						_sndTransf = new SoundTransform(_soundVolume);									_nets.soundTransform = _sndTransf;			_nets.bufferTime = _videoBuffer;			_nets.play(_videoURL);						if ( !_videoStarted ) 			{				_nets.pause();				_videoPlaying = false;			} else {								_videoPlaying = true;			}						_nvideo.attachNetStream(_nets);			addChild(_nvideo);						addEventListener(Event.ENTER_FRAME, controlTime);		}		/* @ add Controlls: Play/Pause Control	____________________________________________*/						public function set addPlayPause(pButton:MovieClip):void		{			playpauseBtMc = new MovieClip();			playpauseBtMc = pButton;			playpauseBtMc.buttonMode = true;			playpauseBtMc.mouseChildren = false;			playpauseBtMc.addEventListener(MouseEvent.CLICK, playPauseVideo);						_videoStarted ? playpauseBtMc.gotoAndStop(2) : playpauseBtMc.gotoAndStop(1)		}		/* @ add Controlls: Central Play Control	____________________________________________*/				public function set addCentralButton(pCentral:MovieClip) : void 		{ 			centralBtMc = new MovieClip();			centralBtMc = pCentral; 			centralBtMc.buttonMode = true;			centralBtMc.mouseChildren = false;			centralBtMc.visible = false;			centralBtMc.addEventListener(MouseEvent.CLICK, playPauseVideo);		}						private function playPauseVideo(e:MouseEvent):void		{			//e.currentTarget.currentFrame == 1 ? e.currentTarget.nextFrame() : e.currentTarget.prevFrame(); 			if ( _videoPlaying ) 			{				_nets.pause();				_videoPlaying = false;				//e.currentTarget.gotoAndStop(1);				playpauseBtMc.gotoAndStop(1);			} else {				if(_actTime >= _uintDurtion)				{					_nets.seek(0);				}else{					_nets.resume();				}				_videoPlaying = true;				if (centralBtMc != null) centralBtMc.visible = false;				//e.currentTarget.gotoAndStop(2);				playpauseBtMc.gotoAndStop(2);			}		}				/* @ add Controlls: Buffer	____________________________________________*/		public function set addBuffer(bClip:MovieClip):void		{			bufferClipMc = new MovieClip();			bufferClipMc = bClip;			bufferClipMc.visible = false;		}			/* @ add Controlls: Volume Control	____________________________________________*/				public function set addVolume(volumeCtrl:MovieClip):void 		{			volumeMC = new MovieClip();			volumeMC = volumeCtrl;			volumeMC.seeXposMC.addEventListener(MouseEvent.MOUSE_DOWN, loopON);			volumeMC.seeXposMC.addEventListener(MouseEvent.MOUSE_UP, loopOFF);			volumeMC.seeXposMC.addEventListener(MouseEvent.MOUSE_OUT, loopOFF);		}				private	function loopON(e:Event)		{			addEventListener(Event.ENTER_FRAME, seeValue);		}		private function loopOFF(e:Event)		{			removeEventListener(Event.ENTER_FRAME, seeValue);		}		private function seeValue(e:Event)		{			volumeMC.control.scaleX = Math.round((volumeMC.seeXposMC.mouseX/volumeMC.seeXposMC.width)*100)*.01;			setVolume(volumeMC.control.scaleX);					}					/* @ add Controlls: Mute	____________________________________________*/		public function set addMuteSound(muteClip:MovieClip):void		{			muteButtomMc = new MovieClip();			muteButtomMc = muteClip;			muteButtomMc.buttonMode = true;			muteButtomMc.mouseChildren = false;			muteButtomMc.addEventListener(MouseEvent.CLICK, muteSound);		}		private function muteSound(e:MouseEvent):void		{			e.currentTarget.currentFrame == 1 ? e.currentTarget.nextFrame() : e.currentTarget.prevFrame(); 			if ( _soundVolume > 0 )			{				_pastVolume = _soundVolume;				_soundVolume = 0;				_sndTransf = new SoundTransform(_soundVolume);				_nets.soundTransform = _sndTransf;								volumeMC.control.scaleX = _soundVolume;							} else {				_soundVolume = _pastVolume;				_sndTransf = new SoundTransform(_soundVolume);				_nets.soundTransform = _sndTransf;								volumeMC.control.scaleX = _soundVolume;				}					}				public function setVolume(n:Number) : void 		{			if(muteButtomMc)muteButtomMc.gotoAndStop(1);			_pastVolume = _soundVolume;			_soundVolume = n;			_sndTransf = new SoundTransform(_soundVolume);			_nets.soundTransform = _sndTransf;		}		/* @ add Controlls: Duration time	____________________________________________*/		private function metaObject(o:Object):void		{			_uintDurtion = o.duration;		}		private function controlTime(e:Event):void		{			if ( durTimeMc != null )			{				_actTime = _nets.time;				durTimeMc.autoSize = TextFieldAutoSize.RIGHT;				// @ Creatint the variables				var tminute:String;				var tsecond:String;				var aminute:String;				var asecond:String;				// @ Actual Minute				if ( _actTime/60 < 10 ) { aminute = String("0" + int(_actTime/60)); }				else { aminute = String(int(_actTime/60)); }				// @ Actual Second				if ( _actTime%60 < 10 ) { asecond = String("0" + int(_actTime%60)); }				else { asecond = String(int(_actTime%60)); }				// @ Total Minute				if ( _uintDurtion/60 < 10 ) { tminute = String("0" + int(_uintDurtion/60)); }				else { tminute = String(int(_uintDurtion/60)); }				// @ Total Second				if ( _uintDurtion%60 < 10 ) { tsecond = String("0" + int(_uintDurtion%60)); }				else { tsecond = String(int(_uintDurtion%60)); }				// @ Construct the Time				durTimeMc.text = String(aminute + ":" + asecond + " / " + tminute + ":" + tsecond);			}			if ( _seekProgress != null )			{				_seekProgress.scaleX = ( _nets.time / _uintDurtion );			}			if ( _seekLoader != null )			{				_seekLoader.scaleX = ( _nets.bytesLoaded / _nets.bytesTotal );								if(_nets.bytesLoaded / _nets.bytesTotal == 1) 				{					if (bufferClipMc != null) bufferClipMc.visible = false;					if (centralBtMc != null && !_videoPlaying && !_loadingFinish) centralBtMc.visible = true;					_loadingFinish = true;				}			}		}		public function set addDuration(duration:TextField):void		{			durTimeMc = new TextField();			durTimeMc = duration;		}		/* @ add Controlls: Seek	____________________________________________*/		public function set addSeek(seekClips:Object):void		{			if ( seekClips.progress != undefined )			{				_seekProgress 	= new MovieClip();				_seekProgress 	= seekClips.progress;				_seekWidth 		= _seekProgress.width;				_seekProgress.addEventListener(MouseEvent.CLICK, seekTo);			}			if ( seekClips.loader != undefined )			{				_seekLoader 	= new MovieClip();				_seekLoader 	= seekClips.loader;				_seekWidth 	= _seekLoader.width;				_seekLoader.addEventListener(MouseEvent.CLICK, seekTo);			}		}		private function seekTo(e:MouseEvent):void		{			if ( _seekLoader != null && e.currentTarget.mouseX < _seekLoader.width )			{				var videoPercent:Number = (( e.currentTarget.mouseX ) / _seekWidth);				_nets.seek(_uintDurtion * videoPercent);			}		}		/* @ add Controlls: Close	____________________________________________*/		public function close():void		{			_nets.close();		}		/* @ Events of video		____________________________________________*/		private function onVideoEvent(stat:Object):void		{			switch(stat.info.code)			{				case "NetStream.Play.Start":					if (bufferClipMc != null)  bufferClipMc.visible = true;					if (centralBtMc != null) centralBtMc.visible = false;					break;				case "NetStream.Buffer.Empty":						if (_actTime >= _uintDurtion)						{							if (bufferClipMc != null) bufferClipMc.visible = false;							if (playpauseBtMc != null) {playpauseBtMc.gotoAndStop(1);_videoPlaying = false;}							if (centralBtMc != null) centralBtMc.visible = true;						}else{							if (bufferClipMc != null) bufferClipMc.visible = true;						}						break;					break;				case "NetStream.Buffer.Full":					if (bufferClipMc != null) bufferClipMc.visible = false;					break;					case "NetStream.Play.Stop":					if (_actTime >= _uintDurtion)					{						if (bufferClipMc != null) bufferClipMc.visible = false;						if (playpauseBtMc != null) {playpauseBtMc.gotoAndStop(1);_videoPlaying = false;}					}else{						if (bufferClipMc != null) bufferClipMc.visible = false;					}					break;					}			//trace(stat.info.code);		}		/* @ END OF CODE			____________________________________________*/		}	}