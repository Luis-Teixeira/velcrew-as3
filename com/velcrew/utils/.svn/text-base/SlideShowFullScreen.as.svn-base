/* AS3	Copyright 2009 __velcrew__.		www.velcrew.com*/package com.velcrew.utils {		import flash.display.Sprite;	import flash.display.Loader;	import flash.events.*;    import flash.net.URLRequest;    import flash.utils.Timer;	import noponies.display.NpFSObjectResize;	import gs.TweenLite;		/**	 *	Class description.	 *	 *	@langversion ActionScript 3.0	 *	@playerversion Flash 9.0	 *	 *	@author Luis Teixeira	 *	@since  18.05.2009	 *		 *		 *	DEPENDENCIES : TweenLite form GreenSock  - http://blog.greensock.com/tweenliteas3/	 *				 : noponies.display.NpFSObjectResize		 *		 */	public class SlideShowFullScreen extends Sprite {				private var _photos 		: Array;		private var _loader1 		: Loader;		private var _loader2 		: Loader;		private var _timer			: Timer;		private var _delay 			: Number;		private var _fadeTime 		: Number;				private var _currentFotoId  : int 		= 0;		private var _muliplyDelay   : Number	= 1000;				private var _fs1 : NpFSObjectResize = new NpFSObjectResize();		private var _fs2 : NpFSObjectResize = new NpFSObjectResize();								public function SlideShowFullScreen(photos:Array,delay:Number = 5, fadeTime:Number = 2)		{						_photos = photos;			_delay = delay * _muliplyDelay;			_fadeTime = fadeTime;						_loader1 = new Loader();			_loader1.contentLoaderInfo.addEventListener(Event.COMPLETE, completeHandler);			_loader1.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, progressHandler);			_loader2 = new Loader()			_loader2.contentLoaderInfo.addEventListener(Event.COMPLETE, completeHandler);			_loader2.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, progressHandler);			_loader1.alpha = 0;			_loader2.alpha = 0;						_timer = new Timer(_delay, 1);			_timer.addEventListener(TimerEvent.TIMER, timerHandler);			_timer.addEventListener(TimerEvent.TIMER_COMPLETE, timeCompleteHandler);						addChild(_loader1);			addChild(_loader2);					loadImg(_photos[0]);		}					//--------------------------------------		//  GETTER/SETTERS timer, fadeTime		//--------------------------------------		public function set delay(value:Number) : void { 			_delay = value;			_timer = new Timer(_delay, 1); 		}				public function set fadeTime(value:Number) : void { 			_fadeTime = value; 		}		//--------------------------------------		//  PUBLIC METHODS  pause, next, prev, play		//--------------------------------------				private function loadImg(url:String)		{			getChildIndex(_loader1) == 0 ? _loader1.load(new URLRequest(url)) : _loader2.load(new URLRequest(url));		}				private function completeHandler(e:Event) : void 		{			//_timer.start();					if(getChildIndex(_loader1) == 0)			{				_fs1.addResizeTarget(_loader1, 0,0,"full")				swapLoaders(_loader2);				TweenLite.to(_loader1, _fadeTime,{alpha:1,onComplete:_timer.start})				TweenLite.to(_loader2, _fadeTime,{alpha:0})			} else {				_fs2.addResizeTarget(_loader2, 0,0,"full")				swapLoaders(_loader1);				TweenLite.to(_loader2, _fadeTime,{alpha:1,onComplete:_timer.start})				TweenLite.to(_loader1, _fadeTime,{alpha:0})			}		}				private function progressHandler(e:Event) : void 		{			//trace("a carregar");		}				private function timeCompleteHandler(e:Event) : void 		{			_currentFotoId < _photos.length - 1 ? _currentFotoId ++ : _currentFotoId = 0;			_timer.reset();			loadImg(_photos[_currentFotoId]);		}				private function timerHandler(e:Event) : void 		{					}				private function swapLoaders(virtualLoader:Loader) : void 		{			setChildIndex(virtualLoader, 0)		}				//--------------------------------------		//  PRIVATE & PROTECTED INSTANCE METHODS		//--------------------------------------			}	}